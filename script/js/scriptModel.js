// Generated by CoffeeScript 1.4.0
(function() {
  var Command, Oboobs, Presentation, Slide, SlideshowEditor,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Slide = (function() {

    function Slide(id, effect, animation, delay) {
      this.id = id;
      this.effect = effect;
      this.animation = animation;
      this.delay = delay;
      this.info = __bind(this.info, this);

    }

    Slide.prototype.replace = function(id, effect, animation, delay) {
      this.id = id;
      this.effect = effect;
      this.animation = animation;
      this.delay = delay;
    };

    Slide.prototype.info = function() {
      return alert("id: " + this.id + "; effect: " + this.effect + "; animation: " + this.animation + "; delay: " + this.delay + ";");
    };

    return Slide;

  })();

  SlideshowEditor = (function() {

    function SlideshowEditor() {}

    SlideshowEditor.arraySlide = [];

    SlideshowEditor.currentSlideIndex = -1;

    SlideshowEditor.init = function() {
      Command.addSlide();
      $('#slideshow').sortable({
        start: SlideshowEditor.sortSlideStart,
        stop: SlideshowEditor.sortSlideStop
      });
      $('#centerBox').droppable({
        drop: SlideshowEditor.dropInMain
      });
      return $('#toolEffect>img').draggable({
        appendTo: 'body',
        helper: 'clone',
        revert: true,
        revertDuration: 0,
        zIndex: 200,
        containment: 'body'
      });
    };

    SlideshowEditor.addSlide = function() {
      if (SlideshowEditor.getCountSlide() === 0) {
        SlideshowEditor.arraySlide.push(new Slide('32532', '', 'blind', '1000'));
        return $("div#slideshow").append("<div id=\"slide\"><div><div></div><img></div></div>");
      } else {
        SlideshowEditor.arraySlide.splice(SlideshowEditor.currentSlideIndex + 1, 0, new Slide('32532', '', 'blind', '1000'));
        return $("div#slideshow>div").eq(SlideshowEditor.currentSlideIndex).after("<div id=\"slide\"><div><div></div><img></div></div>");
      }
    };

    SlideshowEditor.generateSlide = function() {
      var slideDiv;
      slideDiv = "<div id=\"slide\"><div><div></div><img></div></div>";
      if (SlideshowEditor.currentSlideIndex === -1) {
        return $("div#slideshow").append(slideDiv);
      } else {
        return $("div#slideshow>div").eq(SlideshowEditor.currentSlideIndex).after(slideDiv);
      }
    };

    SlideshowEditor.removeSlide = function() {
      if (SlideshowEditor.getCountSlide() > 1) {
        $("#slideshow>div").eq(SlideshowEditor.currentSlideIndex).detach();
        return SlideshowEditor.arraySlide.splice(SlideshowEditor.currentSlideIndex, 1);
      }
    };

    SlideshowEditor.setIndexSlide = function(index) {
      if (index >= 0 && index < SlideshowEditor.getCountSlide()) {
        return SlideshowEditor.currentSlideIndex = index;
      }
    };

    SlideshowEditor.deselectSlide = function() {
      return $("#slideshow>div").removeAttr('class');
    };

    SlideshowEditor.selectSlide = function() {
      $("#slideshow>div").eq(SlideshowEditor.currentSlideIndex).attr('class', 'selectedSlide');
      return SlideshowEditor.updateToolsPanel();
    };

    SlideshowEditor.recurrentSlide = function(event) {
      return SlideshowEditor.currentSlideIndex = $("#slideshow>div>div>div").index($(event.target));
    };

    SlideshowEditor.correctSlideIndex = function() {
      if (SlideshowEditor.currentSlideIndex === SlideshowEditor.getCountSlide()) {
        return SlideshowEditor.currentSlideIndex = SlideshowEditor.getCountSlide() - 1;
      } else if (SlideshowEditor.currentSlideIndex === -2) {
        return SlideshowEditor.currentSlideIndex = -1;
      }
    };

    SlideshowEditor.correctSlideshowIndex = function() {
      if (SlideshowEditor.currentSlideIndex === SlideshowEditor.getCountSlide()) {
        return SlideshowEditor.currentSlideIndex = 0;
      } else if (SlideshowEditor.currentSlideIndex === -1) {
        return SlideshowEditor.currentSlideIndex = SlideshowEditor.getCountSlide();
      }
    };

    SlideshowEditor.updateMainSlide = function() {
      var sl;
      if (SlideshowEditor.getCountSlide() > 0) {
        sl = SlideshowEditor.getCurrentSlide();
        $("#mainSlide>div").attr('id', sl.id).attr('effect', sl.effect).attr('animation', sl.animation).attr('delay', sl.delay);
        $("#mainSlide>img").attr('src', Oboobs.idToSrc(sl.id));
        return SlideshowEditor.alignSlideFirst();
      }
    };

    SlideshowEditor.replaceCurrentSlide = function(slide) {
      var currentSlide;
      currentSlide = SlideshowEditor.getCurrentSlide();
      return currentSlide.id = slide.attr('id');
    };

    SlideshowEditor.updateCurrentSlide = function() {
      var div, slide;
      if (SlideshowEditor.getCountSlide() > 0) {
        slide = SlideshowEditor.getCurrentSlide();
        $('#slideshow>div>div>img').eq(SlideshowEditor.currentSlideIndex).attr('src', Oboobs.idToSrc(slide.id));
        div = $('#slideshow>div>div>div').eq(SlideshowEditor.currentSlideIndex);
        div.attr("id", slide.id);
        div.attr("effect", slide.effect);
        div.attr("animation", slide.animation);
        return div.attr("delay", slide.delay);
      }
    };

    SlideshowEditor.updateToolsPanel = function() {
      var slide;
      slide = SlideshowEditor.getCurrentSlide();
      $('#animation').val(slide.animation);
      return $('#delay').val(slide.delay);
    };

    SlideshowEditor.bindSlide = function() {
      return $('#slideshow>div>div').eq(SlideshowEditor.currentSlideIndex).on("click", function(event) {
        return Command.selectSlide(event);
      });
    };

    SlideshowEditor.setEffect = function(effect) {
      return SlideshowEditor.arraySlide[SlideshowEditor.currentSlideIndex].effect = effect;
    };

    SlideshowEditor.sortSlideStart = function(event, ui) {
      var $item;
      SlideshowEditor.deselectSlide();
      SlideshowEditor.currentSlideIndex = $("#slideshow>div").index($item = $(ui.item[0]));
      SlideshowEditor.selectSlide();
      return SlideshowEditor.updateMainSlide();
    };

    SlideshowEditor.sortSlideStop = function(event, ui) {
      var $item;
      return SlideshowEditor.shiftSlide($("#slideshow>div").index($item = $(ui.item[0])));
    };

    SlideshowEditor.shiftSlide = function(index) {
      var slide;
      slide = SlideshowEditor.arraySlide.splice(SlideshowEditor.currentSlideIndex, 1);
      SlideshowEditor.arraySlide.splice(index, 0, slide[0]);
      return SlideshowEditor.currentSlideIndex = index;
    };

    SlideshowEditor.dropInMain = function(event, ui) {
      var $div;
      $div = $(ui.draggable);
      if ($div.attr('effect') !== void 0) {
        return Command.setEffect($div.attr('effect'));
      } else {
        return Command.selectSlideFromOboobs($div);
      }
    };

    SlideshowEditor.getCurrentSlide = function() {
      return SlideshowEditor.arraySlide[SlideshowEditor.currentSlideIndex];
    };

    SlideshowEditor.getCountSlide = function() {
      return SlideshowEditor.arraySlide.length;
    };

    SlideshowEditor.clearSlide = function() {
      return $('#slideshow').empty();
    };

    SlideshowEditor.regenerateSlide = function() {
      var slide, _i, _len, _ref, _results;
      _ref = SlideshowEditor.arraySlide;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        slide = _ref[_i];
        SlideshowEditor.generateSlide();
        SlideshowEditor.currentSlideIndex++;
        SlideshowEditor.updateCurrentSlide();
        _results.push(SlideshowEditor.bindSlide());
      }
      return _results;
    };

    SlideshowEditor.alignSlideFirst = function() {
      var containerWidth, height, leftIndent, slide, width;
      slide = $('#mainSlide img:first');
      width = slide.width();
      height = slide.height();
      containerWidth = $('#mainSlide').width();
      leftIndent = (containerWidth - width) / 2;
      slide.attr("style", "left: " + leftIndent + "px");
      return $("#mainSlide > div").attr("style", "left: " + leftIndent + "px").width(width).height(height);
    };

    SlideshowEditor.alignSlideLast = function() {
      var containerWidth, height, leftIndent, slide, width;
      slide = $('#mainSlide img:last');
      width = slide.width();
      height = slide.height();
      containerWidth = $('#mainSlide').width();
      leftIndent = (containerWidth - width) / 2;
      slide.attr("style", "left: " + leftIndent + "px");
      return $("#mainSlide > div").attr("style", "left: " + leftIndent + "px").width(width).height(height);
    };

    return SlideshowEditor;

  }).call(this);

  Oboobs = (function() {

    function Oboobs() {}

    Oboobs.getPhotosIds = function() {
      var photo, photosJsonInfo, xmlHttp, _i, _len, _results;
      xmlHttp = null;
      xmlHttp = new XMLHttpRequest();
      xmlHttp.open("GET", "http://api.oboobs.ru/noise/30/'", false);
      xmlHttp.send(null);
      photosJsonInfo = eval("(" + xmlHttp.responseText + ")");
      _results = [];
      for (_i = 0, _len = photosJsonInfo.length; _i < _len; _i++) {
        photo = photosJsonInfo[_i];
        _results.push(photo.id);
      }
      return _results;
    };

    Oboobs.idToSrc = function(id) {
      id = String(id);
      while (id.length < 5) {
        id = "0" + id;
      }
      return 'http://media.oboobs.ru/noise_preview/' + id + '.jpg';
    };

    Oboobs.getPhotos = function() {
      var arrayIds, id, _i, _len;
      arrayIds = Oboobs.getPhotosIds();
      for (_i = 0, _len = arrayIds.length; _i < _len; _i++) {
        id = arrayIds[_i];
        $('#pictures').append('<img id="' + id + '" src="' + Oboobs.idToSrc(id) + '"/>');
      }
      return Oboobs.bindPictures();
    };

    Oboobs.bindPictures = function() {
      $('#pictures>img').on("click", function(event) {
        return Command.selectSlideFromOboobs($(event.target));
      });
      return $('#pictures>img').draggable({
        appendTo: 'body',
        helper: 'clone',
        revert: true,
        revertDuration: 0,
        zIndex: 1000,
        containment: 'body'
      });
    };

    return Oboobs;

  }).call(this);

  Command = (function() {

    function Command() {}

    Command.addSlide = function() {
      SlideshowEditor.deselectSlide();
      SlideshowEditor.addSlide();
      SlideshowEditor.currentSlideIndex++;
      SlideshowEditor.updateCurrentSlide();
      SlideshowEditor.updateMainSlide();
      SlideshowEditor.selectSlide();
      return SlideshowEditor.bindSlide();
    };

    Command.removeSlide = function() {
      SlideshowEditor.deselectSlide();
      SlideshowEditor.removeSlide();
      SlideshowEditor.correctSlideIndex();
      SlideshowEditor.updateMainSlide();
      return SlideshowEditor.selectSlide();
    };

    Command.selectSlideFromOboobs = function(slide) {
      SlideshowEditor.replaceCurrentSlide(slide);
      SlideshowEditor.updateCurrentSlide();
      return SlideshowEditor.updateMainSlide();
    };

    Command.selectSlide = function(event) {
      SlideshowEditor.deselectSlide();
      SlideshowEditor.recurrentSlide(event);
      SlideshowEditor.updateMainSlide();
      return SlideshowEditor.selectSlide();
    };

    Command.previousSlide = function() {
      SlideshowEditor.deselectSlide();
      SlideshowEditor.setIndexSlide(SlideshowEditor.currentSlideIndex - 1);
      SlideshowEditor.updateCurrentSlide();
      SlideshowEditor.updateMainSlide();
      return SlideshowEditor.selectSlide();
    };

    Command.nextSlide = function() {
      SlideshowEditor.deselectSlide();
      SlideshowEditor.setIndexSlide(SlideshowEditor.currentSlideIndex + 1);
      SlideshowEditor.updateCurrentSlide();
      SlideshowEditor.updateMainSlide();
      return SlideshowEditor.selectSlide();
    };

    Command.setEffect = function(effect) {
      SlideshowEditor.setEffect(effect);
      SlideshowEditor.updateCurrentSlide();
      return SlideshowEditor.updateMainSlide();
    };

    Command.saveSlideshow = function() {
      var fileName;
      fileName = prompt('Введите название слайдшоу');
      if (fileName !== null) {
        return localStorage[fileName] = JSON.stringify(SlideshowEditor.arraySlide);
      }
    };

    Command.loadSlideshowDialog = function() {
      var button, dialog, key, _i, _len, _ref;
      dialog = $("#dialog-modal");
      dialog.empty();
      _ref = Object.keys(localStorage);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        key = _ref[_i];
        button = $('<button>');
        button.text(key);
        button.on("click", function(event) {
          Command.loadSlideshow($(this).text());
          return dialog.dialog("close");
        });
        $("#dialog-modal").append(button);
      }
      return $("#dialog-modal").dialog({
        title: "Выберите слайдшоу",
        modal: true
      });
    };

    Command.loadSlideshow = function(key) {
      SlideshowEditor.arraySlide = JSON.parse(localStorage[key]);
      SlideshowEditor.deselectSlide();
      SlideshowEditor.clearSlide();
      SlideshowEditor.currentSlideIndex = -1;
      SlideshowEditor.regenerateSlide();
      SlideshowEditor.currentSlideIndex = 0;
      SlideshowEditor.updateCurrentSlide();
      SlideshowEditor.updateMainSlide();
      return SlideshowEditor.selectSlide();
    };

    return Command;

  }).call(this);

  Presentation = (function() {

    function Presentation() {}

    Presentation.currentTimeoutId = 0;

    Presentation.showSlide = function(slide) {
      var $newSlide;
      $newSlide = $("<img/>");
      $newSlide.attr({
        src: Oboobs.idToSrc(slide.id)
      });
      $("#mainSlide").append($newSlide);
      return $("#mainSlide>div").attr('effect', slide.effect);
    };

    Presentation.hideLastSlide = function() {
      return $("#mainSlide img:last").hide();
    };

    Presentation.startTransitionEffect = function() {
      $("#mainSlide img:first").hide('blind', Presentation.removeFirstSlide);
      return $("#mainSlide img:last").show('blind');
    };

    Presentation.removeFirstSlide = function() {
      return $("#mainSlide img:first").remove();
    };

    Presentation.slide = function() {
      var currentSlide, slide;
      if (SlideshowEditor.getCountSlide() === SlideshowEditor.currentSlideIndex + 1) {
        return;
      }
      slide = SlideshowEditor.getCurrentSlide();
      SlideshowEditor.deselectSlide();
      SlideshowEditor.currentSlideIndex++;
      SlideshowEditor.selectSlide();
      currentSlide = SlideshowEditor.getCurrentSlide();
      Presentation.showSlide(currentSlide);
      SlideshowEditor.alignSlideLast();
      $("#mainSlide>div").width($("#mainSlide img:last").width());
      $("#mainSlide img:last").hide();
      $("#mainSlide img:first").hide(slide.animation, Presentation.removeFirstSlide);
      $("#mainSlide img:last").show(slide.animation);
      return Presentation.currentTimeoutId = setTimeout(Presentation.slide, currentSlide.delay);
    };

    Presentation.startPresentation = function() {
      var currentSlide;
      currentSlide = SlideshowEditor.getCurrentSlide();
      return Presentation.currentTimeoutId = setTimeout(Presentation.slide, currentSlide.delay);
    };

    Presentation.stopPresentation = function() {
      return clearTimeout(Presentation.currentTimeoutId);
    };

    return Presentation;

  }).call(this);

  $(function() {
    SlideshowEditor.init();
    Oboobs.getPhotos();
    $('#loadImage').on("click", function() {
      return Oboobs.getPhotos();
    });
    $('#bSaveSlideshow').on("click", function() {
      return Command.saveSlideshow();
    });
    $('#bLoadSlideshow').on("click", function() {
      return Command.loadSlideshowDialog();
    });
    $('#bAddSlide').on("click", function() {
      return Command.addSlide();
    });
    $('#bRemoveSlide').on("click", function() {
      return Command.removeSlide();
    });
    $("#bPrevious").on("click", function() {
      return Command.previousSlide();
    });
    $("#bNext").on("click", function() {
      return Command.nextSlide();
    });
    $('img[src="images/eBlackAndWhite.png"]').on("click", function() {
      return Command.setEffect('blackAndWhite');
    });
    $('img[src="images/eSepia.png"]').on("click", function() {
      return Command.setEffect('sepia');
    });
    $('img[src="images/eVignette.png"]').on("click", function() {
      return Command.setEffect('vignette');
    });
    $('img[src="images/remove.png"]').on("click", function() {
      return Command.setEffect('');
    });
    $('#animation').on("click", function() {
      return SlideshowEditor.getCurrentSlide().animation = $("#animation option:selected").attr('value');
    });
    $('#delay').on("click", function() {
      return SlideshowEditor.getCurrentSlide().delay = $("#delay option:selected").attr('value');
    });
    $('#bRunSlideshow').on("click", function() {
      return Presentation.startPresentation();
    });
    return $('#bStopSlideshow').on("click", function() {
      return Presentation.stopPresentation();
    });
  });

}).call(this);
